-- VHDL Entity ece411.Control.interface
--
-- Created:
--          by - strasbe1.ews (gelib-057-39.ews.illinois.edu)
--          at - 18:26:36 02/07/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Control IS
   PORT( 
      A          : IN     std_logic;
      Addr0      : IN     std_logic;
      CheckN     : IN     std_logic;
      CheckP     : IN     std_logic;
      CheckZ     : IN     std_logic;
      D          : IN     std_logic;
      MRESP_H    : IN     std_logic;
      Opcode     : IN     LC3b_opcode;
      RESET_L    : IN     std_logic;
      START_H    : IN     std_logic;
      clk        : IN     std_logic;
      n          : IN     std_logic;
      p          : IN     std_logic;
      z          : IN     std_logic;
      ADJ6Sel    : OUT    std_logic;
      ALUMuxSel  : OUT    std_logic;
      ALUop      : OUT    LC3b_aluop;
      DestSel    : OUT    std_logic;
      JMPSel     : OUT    std_logic;
      JSRSel     : OUT    std_logic;
      LDIMuxSel  : OUT    std_logic;
      LEASel     : OUT    std_logic;
      LoadIR     : OUT    std_logic;
      LoadMAR    : OUT    std_logic;
      LoadMDR    : OUT    std_logic;
      LoadNZP    : OUT    std_logic;
      LoadPC     : OUT    std_logic;
      LwrByteSel : OUT    std_logic;
      MARMuxSel  : OUT    std_logic;
      MDRMuxSel  : OUT    std_logic;
      MREAD_L    : OUT    std_logic;
      MWRITEH_L  : OUT    std_logic;
      MWRITEL_L  : OUT    std_logic;
      PCMuxSel   : OUT    std_logic;
      RFMuxSel   : OUT    std_logic;
      RegWrite   : OUT    std_logic;
      StoreSR    : OUT    std_logic;
      TrapSel    : OUT    std_logic;
      Zext8Sel   : OUT    std_logic
   );

-- Declarations

END Control ;

--
-- VHDL Architecture ece411.Control.fsm
--
-- Created:
--          by - strasbe1.ews (gelib-057-39.ews.illinois.edu)
--          at - 18:26:36 02/07/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Control IS

   TYPE STATE_TYPE IS (
      Reset,
      BR1,
      BR2,
      Decode,
      IF1,
      IF2,
      IF3,
      CalcADDR,
      ST1,
      LD1,
      ST2,
      LD2,
      JMP,
      LEA,
      JSR1,
      JSR2,
      LDI1,
      LDI2,
      LDI5,
      LDI3,
      LDI4,
      STI1,
      STI2,
      STI3,
      STI4,
      STI5,
      ADD1,
      L_AND1,
      L_NOT1,
      RSHF,
      LSHF,
      RSHFA,
      RSHFL,
      TRAP0,
      TRAP2,
      TRAP3,
      TRAP1,
      STBL2,
      STBL1,
      LDB2,
      LDB1,
      CalcByteAddr,
      STB,
      STBH1,
      STBH2
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= Reset;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      A,
      Addr0,
      CheckN,
      CheckP,
      CheckZ,
      D,
      MRESP_H,
      Opcode,
      START_H,
      current_state,
      n,
      p,
      z
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN Reset => 
            IF (START_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= Reset;
            END IF;
         WHEN BR1 => 
            IF (( ( n AND CheckN ) OR 
                ( p AND CheckP ) OR 
                ( z AND CheckZ ) ) = '1') THEN 
               next_state <= BR2;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN BR2 => 
            next_state <= IF1;
         WHEN Decode => 
            IF ((Opcode = op_ldr) OR 
                (Opcode = op_str) OR 
                (Opcode = op_ldi) OR
                (Opcode = op_sti)) THEN 
               next_state <= CalcADDR;
            ELSIF (Opcode = op_br) THEN 
               next_state <= BR1;
            ELSIF (Opcode = op_jmp) THEN 
               next_state <= JMP;
            ELSIF (Opcode = op_lea) THEN 
               next_state <= LEA;
            ELSIF (Opcode = op_jsr) THEN 
               next_state <= JSR1;
            ELSIF (((Opcode = op_and) OR
                   (Opcode = op_not) OR
                   (Opcode = op_add) OR
                   (Opcode = op_SHF)) AND (Opcode = op_add)) THEN 
               next_state <= ADD1;
            ELSIF (((Opcode = op_and) OR
                   (Opcode = op_not) OR
                   (Opcode = op_add) OR
                   (Opcode = op_SHF)) AND (Opcode = op_and)) THEN 
               next_state <= L_AND1;
            ELSIF (((Opcode = op_and) OR
                   (Opcode = op_not) OR
                   (Opcode = op_add) OR
                   (Opcode = op_SHF)) AND (Opcode = op_not)) THEN 
               next_state <= L_NOT1;
            ELSIF (((Opcode = op_and) OR
                   (Opcode = op_not) OR
                   (Opcode = op_add) OR
                   (Opcode = op_SHF)) AND (Opcode = op_shf) AND (D = '0')) THEN 
               next_state <= LSHF;
            ELSIF (((Opcode = op_and) OR
                   (Opcode = op_not) OR
                   (Opcode = op_add) OR
                   (Opcode = op_SHF)) AND (Opcode = op_shf) AND (D = '1')) THEN 
               next_state <= RSHF;
            ELSIF (Opcode = op_trap) THEN 
               next_state <= TRAP0;
            ELSIF ((Opcode = op_stb) OR
                   (Opcode = op_ldb)) THEN 
               next_state <= CalcByteAddr;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN IF1 => 
            next_state <= IF2;
         WHEN IF2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF3;
            ELSE
               next_state <= IF2;
            END IF;
         WHEN IF3 => 
            next_state <= Decode;
         WHEN CalcADDR => 
            IF (Opcode = op_str) THEN 
               next_state <= ST1;
            ELSIF (Opcode = op_ldr) THEN 
               next_state <= LD1;
            ELSIF (Opcode = op_ldi) THEN 
               next_state <= LDI1;
            ELSIF (Opcode = op_sti) THEN 
               next_state <= STI1;
            ELSE
               next_state <= CalcADDR;
            END IF;
         WHEN ST1 => 
            next_state <= ST2;
         WHEN LD1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LD2;
            ELSE
               next_state <= LD1;
            END IF;
         WHEN ST2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= ST2;
            END IF;
         WHEN LD2 => 
            next_state <= IF1;
         WHEN JMP => 
            next_state <= IF1;
         WHEN LEA => 
            next_state <= IF1;
         WHEN JSR1 => 
            next_state <= JSR2;
         WHEN JSR2 => 
            next_state <= IF1;
         WHEN LDI1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDI2;
            ELSE
               next_state <= LDI1;
            END IF;
         WHEN LDI2 => 
            next_state <= LDI3;
         WHEN LDI5 => 
            next_state <= IF1;
         WHEN LDI3 => 
            next_state <= LDI4;
         WHEN LDI4 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDI5;
            ELSE
               next_state <= LDI4;
            END IF;
         WHEN STI1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= STI2;
            ELSE
               next_state <= STI1;
            END IF;
         WHEN STI2 => 
            next_state <= STI3;
         WHEN STI3 => 
            next_state <= STI4;
         WHEN STI4 => 
            next_state <= STI5;
         WHEN STI5 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STI5;
            END IF;
         WHEN ADD1 => 
            next_state <= IF1;
         WHEN L_AND1 => 
            next_state <= IF1;
         WHEN L_NOT1 => 
            next_state <= IF1;
         WHEN RSHF => 
            IF (A = '0') THEN 
               next_state <= RSHFL;
            ELSIF (A = '1') THEN 
               next_state <= RSHFA;
            ELSE
               next_state <= RSHF;
            END IF;
         WHEN LSHF => 
            next_state <= IF1;
         WHEN RSHFA => 
            next_state <= IF1;
         WHEN RSHFL => 
            next_state <= IF1;
         WHEN TRAP0 => 
            next_state <= TRAP1;
         WHEN TRAP2 => 
            IF (MRESP_H = '0') THEN 
               next_state <= TRAP3;
            ELSE
               next_state <= TRAP2;
            END IF;
         WHEN TRAP3 => 
            next_state <= IF1;
         WHEN TRAP1 => 
            next_state <= TRAP2;
         WHEN STBL2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STBL2;
            END IF;
         WHEN STBL1 => 
            next_state <= STBL2;
         WHEN LDB2 => 
            next_state <= IF1;
         WHEN LDB1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDB2;
            ELSE
               next_state <= LDB1;
            END IF;
         WHEN CalcByteAddr => 
            IF (Opcode = op_ldb) THEN 
               next_state <= LDB1;
            ELSIF (Opcode = op_stb) THEN 
               next_state <= STB;
            ELSE
               next_state <= CalcByteAddr;
            END IF;
         WHEN STB => 
            IF (Addr0 = '0') THEN 
               next_state <= STBL1;
            ELSIF (Addr0 = '1') THEN 
               next_state <= STBH1;
            ELSE
               next_state <= STB;
            END IF;
         WHEN STBH1 => 
            next_state <= STBH2;
         WHEN STBH2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STBH2;
            END IF;
         WHEN OTHERS =>
            next_state <= Reset;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ADJ6Sel <= '0';
      ALUMuxSel <= '0';
      ALUop <= "000";
      DestSel <= '0';
      JMPSel <= '0';
      JSRSel <= '0';
      LDIMuxSel <= '0';
      LEASel <= '0';
      LoadIR <= '0';
      LoadMAR <= '0';
      LoadMDR <= '0';
      LoadNZP <= '0';
      LoadPC <= '0';
      LwrByteSel <= '0';
      MARMuxSel <= '0';
      MDRMuxSel <= '0';
      MREAD_L <= '1';
      MWRITEH_L <= '1';
      MWRITEL_L <= '1';
      PCMuxSel <= '0';
      RFMuxSel <= '0';
      RegWrite <= '0';
      StoreSR <= '1';
      TrapSel <= '0';
      Zext8Sel <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN BR2 => 
            PCMuxSel <= '1';
            LoadPC <= '1';
         WHEN IF1 => 
            LoadMAR <= '1';
            LoadPC <= '1';
         WHEN IF2 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6 ns;
         WHEN IF3 => 
            LoadIR <= '1';
         WHEN CalcADDR => 
            ALUMuxSel <= '1';
            ALUop  <= alu_add;
            MARMuxSel <= '1';
            LoadMAR <= '1';
         WHEN ST1 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN LD1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN ST2 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN LD2 => 
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN JMP => 
            PCMuxSel <= '1';
            LoadPC <= '1';
            StoreSR <= '1';
            JMPSel <= '1';
         WHEN LEA => 
            LEASel <= '1';
            RegWrite <= '1';
            RFMuxSel <= '1';
            LoadNZP <= '1';
         WHEN JSR1 => 
            RegWrite <= '1';
            DestSel <='1';
            JSRSel <= '1';
            LEASel <= '1';
            RFMuxSel <= '1';
         WHEN JSR2 => 
            JMPSel <= '1';
            PCMuxSel <= '1';
            LoadPC <= '1';
            StoreSR <= '0';
         WHEN LDI1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN LDI2 => 
            LoadMDR <= '1';
         WHEN LDI5 => 
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN LDI3 => 
            ALUMuxSel <= '1';
            LoadMAR <= '1';
            LDIMuxSel <= '1';
            MARMuxSel <= '1';
         WHEN LDI4 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN STI1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN STI2 => 
            LoadMDR <= '1';
         WHEN STI3 => 
            ALUMuxSel <= '1';
            ALUop <= alu_add;
            MARMuxSel <= '1';
            LoadMAR <= '1';
            LDIMuxSel <= '1';
         WHEN STI4 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN STI5 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN ADD1 => 
            ALUop <= alu_add;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
         WHEN L_AND1 => 
            ALUop <= alu_and;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
         WHEN L_NOT1 => 
            ALUop <= alu_not;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
         WHEN RSHF => 
            RFMuxSel <= '1';
            ALUMuxSel <= '1';
            ADJ6SEl <= '1';
         WHEN LSHF => 
            ALUop <= alu_sll;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
            ALUMuxSel <= '1';
            ADJ6SEl <= '1';
         WHEN RSHFA => 
            ALUop <= alu_sra;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
            ALUMuxSel <= '1';
            ADJ6SEl <= '1';
         WHEN RSHFL => 
            ALUop <= alu_srl;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
            ALUMuxSel <= '1';
            ADJ6SEl <= '1';
         WHEN TRAP0 => 
            RegWrite <= '1';
            DestSel <='1';
            JSRSel <= '1';
            LEASel <= '1';
            RFMuxSel <= '1';
         WHEN TRAP2 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN TRAP3 => 
            LoadPC <= '1';
            TrapSel <= '1';
            PCMuxSel <= '1';
         WHEN TRAP1 => 
            MARMuxSel <= '1';
            LoadMAR <= '1';
            LDIMuxSel <= '1';
            Zext8Sel <= '1';
            RFMuxSel <= '1';
         WHEN STBL2 => 
            MWRITEL_L <= '0' after 6ns;
         WHEN STBL1 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN LDB2 => 
            RegWrite <= '1';
            LoadNZP <= '1';
            LwrByteSel <= '1';
         WHEN LDB1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN CalcByteAddr => 
            ALUMuxSel <= '1';
            ALUop  <= alu_add;
            MARMuxSel <= '1';
            LoadMAR <= '1';
            ADJ6Sel <= '1';
         WHEN STBH1 => 
            StoreSR <= '0';
            ALUop <= alu_slb;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN STBH2 => 
            MWRITEH_L <= '0' after 6ns;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
