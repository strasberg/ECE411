-- VHDL Entity ece411.Cache_Datapath.interface
--
-- Created:
--          by - strasbe1.ews (gelib-057-21.ews.illinois.edu)
--          at - 06:26:53 02/28/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee; 
USE ieee.std_logic_1164.all; 
USE ieee.NUMERIC_STD.all; 
 
LIBRARY ece411; 
USE ece411.LC3b_types.all; 

ENTITY Cache_Datapath IS
   PORT( 
      ADDRESS      : IN     LC3b_word;
      CLK          : IN     STD_LOGIC;
      CacheWrite   : IN     std_logic;
      DATAOUT      : IN     LC3b_word;
      DAtaWriteSel : IN     std_logic;
      LRUHold      : IN     std_logic;
      MREAD_L      : IN     std_logic;
      MWRITEH_L    : IN     std_logic;
      MWRITEL_L    : IN     std_logic;
      PMDATAIN     : IN     LC3B_OWORD;
      PauseHits_L  : IN     std_logic;
      RESET_L      : IN     std_logic;
      DATAIN       : OUT    LC3b_word;
      Hit          : OUT    std_logic;
      MRESP_H      : OUT    std_logic;
      MemAction    : OUT    std_logic;
      PMADDRESS    : OUT    LC3B_WORD;
      PMDATAOUT    : OUT    LC3B_OWORD
   );

-- Declarations

END Cache_Datapath ;

--
-- VHDL Architecture ece411.Cache_Datapath.struct
--
-- Created:
--          by - strasbe1.ews (gelib-057-21.ews.illinois.edu)
--          at - 06:26:53 02/28/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee; 
USE ieee.std_logic_1164.all; 
USE ieee.NUMERIC_STD.all; 
 
LIBRARY ece411; 
USE ece411.LC3b_types.all; 


ARCHITECTURE struct OF Cache_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL C1               : std_logic;
   SIGNAL C2               : std_logic;
   SIGNAL CacheDataIn      : LC3b_oword;
   SIGNAL CacheWay1DataOut : LC3B_OWORD;
   SIGNAL DataOut1         : LC3B_OWORD;
   SIGNAL DataWriteOut     : LC3B_Oword;
   SIGNAL Index            : LC3B_C_INDEX;
   SIGNAL LRU1AndOut       : std_logic;
   SIGNAL LRU2AndOut       : std_logic;
   SIGNAL LRUIN            : std_logic;
   SIGNAL LRUNotOut        : std_logic;
   SIGNAL LRUOut           : std_logic;
   SIGNAL LRUWrite         : std_logic;
   SIGNAL Tag              : LC3b_c_tag;
   SIGNAL TagOut           : LC3b_c_tag;
   SIGNAL TagOut1          : LC3b_c_tag;
   SIGNAL ValidOut         : std_logic;
   SIGNAL ValidOut1        : std_logic;
   SIGNAL Way1Hit          : std_logic;
   SIGNAL Way2Hit          : std_logic;
   SIGNAL dataOutsel       : LC3B_8MUX_SEL;
   SIGNAL equal            : std_logic;
   SIGNAL offset           : LC3b_c_offset;
   SIGNAL way1equal        : std_logic;
   SIGNAL word0            : LC3B_WORD;
   SIGNAL word1            : LC3B_WORD;
   SIGNAL word2            : LC3B_WORD;
   SIGNAL word3            : LC3B_WORD;
   SIGNAL word4            : LC3B_WORD;
   SIGNAL word5            : LC3B_WORD;
   SIGNAL word6            : LC3B_WORD;
   SIGNAL word7            : LC3B_WORD;

   -- Implicit buffer signal declarations
   SIGNAL Hit_internal       : std_logic;
   SIGNAL MRESP_H_internal   : std_logic;
   SIGNAL MemAction_internal : std_logic;
   SIGNAL PMDATAOUT_internal : LC3B_OWORD;


   -- Component Declarations
   COMPONENT AND2
   PORT (
      A : IN     std_logic;
      B : IN     std_logic;
      C : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT AND3
   PORT (
      Hit         : IN     std_logic ;
      PauseHits_L : IN     std_logic ;
      MRESP_H     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT AddressParts
   PORT (
      ADDRESS : IN     LC3b_word ;
      Tag     : OUT    LC3b_c_tag ;
      offset  : OUT    LC3b_c_offset ;
      Index   : OUT    LC3B_C_INDEX 
   );
   END COMPONENT;
   COMPONENT CacheWay
   PORT (
      DataIn    : IN     LC3b_oword ;
      DataWrite : IN     std_logic ;
      Index     : IN     LC3B_C_INDEX ;
      Reset_L   : IN     std_logic ;
      TagIn     : IN     LC3B_C_TAG ;
      DataOut   : OUT    LC3B_OWORD ;
      DirtyOut  : OUT    std_logic ;
      TagOut    : OUT    LC3b_c_tag ;
      ValidOut  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT DataOutBreakup
   PORT (
      word0     : OUT    LC3B_WORD ;
      word1     : OUT    LC3B_WORD ;
      word2     : OUT    LC3B_WORD ;
      word3     : OUT    LC3B_WORD ;
      word4     : OUT    LC3B_WORD ;
      word5     : OUT    LC3B_WORD ;
      word6     : OUT    LC3B_WORD ;
      word7     : OUT    LC3B_WORD ;
      PMDATAOUT : IN     LC3B_OWORD 
   );
   END COMPONENT;
   COMPONENT DataOutWrite
   PORT (
      DATAOUT      : IN     LC3b_word ;
      MWRITEH_L    : IN     std_logic ;
      MWRITEL_L    : IN     std_logic ;
      PMDATAOUT    : IN     LC3B_OWORD ;
      offset       : IN     LC3b_c_offset ;
      DataWriteOut : OUT    LC3B_Oword 
   );
   END COMPONENT;
   COMPONENT LRUARRAY
   PORT (
      LRUWrite : IN     std_logic ;
      Index    : IN     LC3B_C_INDEX ;
      RESET_L  : IN     std_logic ;
      LRUIN    : IN     std_logic ;
      LRUOut   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT LRUReg
   PORT (
      Way1Hit   : IN     std_logic ;
      MRESP_H   : IN     std_logic ;
      MemAction : IN     std_logic ;
      LRUIN     : OUT    std_logic ;
      LRUHold   : IN     std_logic ;
      RESET_L   : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT Mux8
   PORT (
      dataOutsel : IN     LC3B_8MUX_SEL ;
      word0      : IN     LC3B_WORD ;
      word1      : IN     LC3B_WORD ;
      word2      : IN     LC3B_WORD ;
      word3      : IN     LC3B_WORD ;
      word4      : IN     LC3B_WORD ;
      word5      : IN     LC3B_WORD ;
      word6      : IN     LC3B_WORD ;
      word7      : IN     LC3B_WORD ;
      DATAIN     : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT NAND3
   PORT (
      MREAD_L   : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      MemAction : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Not1
   PORT (
      A : IN     std_logic;
      F : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     std_logic;
      B : IN     std_logic;
      C : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT OWordMux
   PORT (
      A   : IN     LC3b_oword;
      B   : IN     LC3b_oword;
      Sel : IN     std_logic;
      F   : OUT    LC3b_oword
   );
   END COMPONENT;
   COMPONENT OffsetWord
   PORT (
      offset     : IN     LC3b_c_offset ;
      dataOutsel : OUT    LC3B_8MUX_SEL 
   );
   END COMPONENT;
   COMPONENT PMAddrOffset
   PORT (
      ADDRESS   : IN     LC3b_word ;
      PMADDRESS : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT TagComparator
   PORT (
      A     : IN     LC3b_c_tag;
      B     : IN     LC3b_c_tag;
      equal : OUT    std_logic
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY ece411.AND2;
   FOR ALL : AND3 USE ENTITY ece411.AND3;
   FOR ALL : AddressParts USE ENTITY ece411.AddressParts;
   FOR ALL : CacheWay USE ENTITY ece411.CacheWay;
   FOR ALL : DataOutBreakup USE ENTITY ece411.DataOutBreakup;
   FOR ALL : DataOutWrite USE ENTITY ece411.DataOutWrite;
   FOR ALL : LRUARRAY USE ENTITY ece411.LRUARRAY;
   FOR ALL : LRUReg USE ENTITY ece411.LRUReg;
   FOR ALL : Mux8 USE ENTITY ece411.Mux8;
   FOR ALL : NAND3 USE ENTITY ece411.NAND3;
   FOR ALL : Not1 USE ENTITY ece411.Not1;
   FOR ALL : OR2 USE ENTITY ece411.OR2;
   FOR ALL : OWordMux USE ENTITY ece411.OWordMux;
   FOR ALL : OffsetWord USE ENTITY ece411.OffsetWord;
   FOR ALL : PMAddrOffset USE ENTITY ece411.PMAddrOffset;
   FOR ALL : TagComparator USE ENTITY ece411.TagComparator;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   Way1And : AND2
      PORT MAP (
         A => way1equal,
         B => ValidOut,
         C => Way1Hit
      );
   Way1And1 : AND2
      PORT MAP (
         A => equal,
         B => ValidOut1,
         C => Way2Hit
      );
   Way1LruAnd : AND2
      PORT MAP (
         A => C1,
         B => LRUNotOut,
         C => LRU1AndOut
      );
   Way1LruAnd1 : AND2
      PORT MAP (
         A => MemAction_internal,
         B => CacheWrite,
         C => C1
      );
   Way1LruAnd2 : AND2
      PORT MAP (
         A => MemAction_internal,
         B => CacheWrite,
         C => C2
      );
   Way2LruAnd2 : AND2
      PORT MAP (
         A => LRUOut,
         B => C2,
         C => LRU2AndOut
      );
   hitAnd : AND3
      PORT MAP (
         Hit         => Hit_internal,
         PauseHits_L => PauseHits_L,
         MRESP_H     => MRESP_H_internal
      );
   aAddressParts : AddressParts
      PORT MAP (
         ADDRESS => ADDRESS,
         Tag     => Tag,
         offset  => offset,
         Index   => Index
      );
   CacheWay1 : CacheWay
      PORT MAP (
         DataIn    => CacheDataIn,
         DataWrite => LRU1AndOut,
         Index     => Index,
         Reset_L   => RESET_L,
         TagIn     => Tag,
         DataOut   => CacheWay1DataOut,
         DirtyOut  => OPEN,
         TagOut    => TagOut,
         ValidOut  => ValidOut
      );
   CacheWay2 : CacheWay
      PORT MAP (
         DataIn    => CacheDataIn,
         DataWrite => LRU2AndOut,
         Index     => Index,
         Reset_L   => RESET_L,
         TagIn     => Tag,
         DataOut   => DataOut1,
         DirtyOut  => OPEN,
         TagOut    => TagOut1,
         ValidOut  => ValidOut1
      );
   aDataOutBreakup : DataOutBreakup
      PORT MAP (
         word0     => word0,
         word1     => word1,
         word2     => word2,
         word3     => word3,
         word4     => word4,
         word5     => word5,
         word6     => word6,
         word7     => word7,
         PMDATAOUT => PMDATAOUT_internal
      );
   aDataWriteOut : DataOutWrite
      PORT MAP (
         DATAOUT      => DATAOUT,
         MWRITEH_L    => MWRITEH_L,
         MWRITEL_L    => MWRITEL_L,
         PMDATAOUT    => PMDATAOUT_internal,
         offset       => offset,
         DataWriteOut => DataWriteOut
      );
   aLRUARRAY : LRUARRAY
      PORT MAP (
         LRUWrite => LRUWrite,
         Index    => Index,
         RESET_L  => RESET_L,
         LRUIN    => LRUIN,
         LRUOut   => LRUOut
      );
   aLRUReg : LRUReg
      PORT MAP (
         Way1Hit   => Way1Hit,
         MRESP_H   => MRESP_H_internal,
         MemAction => MemAction_internal,
         LRUIN     => LRUIN,
         LRUHold   => LRUHold,
         RESET_L   => RESET_L
      );
   DataInMux : Mux8
      PORT MAP (
         dataOutsel => dataOutsel,
         word0      => word0,
         word1      => word1,
         word2      => word2,
         word3      => word3,
         word4      => word4,
         word5      => word5,
         word6      => word6,
         word7      => word7,
         DATAIN     => DATAIN
      );
   aNAND3 : NAND3
      PORT MAP (
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         MemAction => MemAction_internal
      );
   LRUNot : Not1
      PORT MAP (
         A => LRUOut,
         F => LRUNotOut
      );
   LRUNot1 : Not1
      PORT MAP (
         A => Hit_internal,
         F => LRUWrite
      );
   HitOR : OR2
      PORT MAP (
         A => Way1Hit,
         B => Way2Hit,
         C => Hit_internal
      );
   DataWriteMux : OWordMux
      PORT MAP (
         A   => PMDATAIN,
         B   => DataWriteOut,
         Sel => DAtaWriteSel,
         F   => CacheDataIn
      );
   U_1 : OWordMux
      PORT MAP (
         A   => DataOut1,
         B   => CacheWay1DataOut,
         Sel => Way1Hit,
         F   => PMDATAOUT_internal
      );
   aOffsetWord : OffsetWord
      PORT MAP (
         offset     => offset,
         dataOutsel => dataOutsel
      );
   aPmAddrOffset : PMAddrOffset
      PORT MAP (
         ADDRESS   => ADDRESS,
         PMADDRESS => PMADDRESS
      );
   Way1Comparator : TagComparator
      PORT MAP (
         A     => Tag,
         B     => TagOut,
         equal => way1equal
      );
   Way2Comparator : TagComparator
      PORT MAP (
         A     => Tag,
         B     => TagOut1,
         equal => equal
      );

   -- Implicit buffered output assignments
   Hit       <= Hit_internal;
   MRESP_H   <= MRESP_H_internal;
   MemAction <= MemAction_internal;
   PMDATAOUT <= PMDATAOUT_internal;

END struct;
