-- VHDL Entity ece411.Cache_Controller.interface
--
-- Created:
--          by - strasbe1.ews (gelib-057-40.ews.illinois.edu)
--          at - 23:09:25 02/19/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee; 
USE ieee.std_logic_1164.all; 
USE ieee.NUMERIC_STD.all; 
 
LIBRARY ece411; 
USE ece411.LC3b_types.all; 

ENTITY Cache_Controller IS
   PORT( 
      CLK         : IN     STD_LOGIC;
      MRESP_H     : IN     std_logic;
      MemAction   : IN     std_logic;
      PMRESP_H    : IN     STD_LOGIC;
      Reset_L     : IN     std_logic;
      CacheWrite  : OUT    std_logic;
      PMREAD_L    : OUT    STD_LOGIC;
      PMWRITE_L   : OUT    STD_LOGIC;
      PauseHits_L : OUT    std_logic
   );

-- Declarations

END Cache_Controller ;

--
-- VHDL Architecture ece411.Cache_Controller.fsm
--
-- Created:
--          by - strasbe1.ews (gelib-057-40.ews.illinois.edu)
--          at - 23:09:25 02/19/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee; 
USE ieee.std_logic_1164.all; 
USE ieee.NUMERIC_STD.all; 
 
LIBRARY ece411; 
USE ece411.LC3b_types.all; 
 
ARCHITECTURE fsm OF Cache_Controller IS

   TYPE STATE_TYPE IS (
      Check,
      Miss
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      CLK,
      Reset_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (Reset_L = '0') THEN
         current_state <= Check;
      ELSIF (CLK'EVENT AND CLK = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      MRESP_H,
      MemAction,
      PMRESP_H,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN Check => 
            IF ((MRESP_H = '0') AND
                (MemAction = '1')) THEN 
               next_state <= Miss;
            ELSE
               next_state <= Check;
            END IF;
         WHEN Miss => 
            IF (PMRESP_H = '1') THEN 
               next_state <= Check;
            ELSE
               next_state <= Miss;
            END IF;
         WHEN OTHERS =>
            next_state <= Check;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      CacheWrite <= '0';
      PMREAD_L <= '1';
      PMWRITE_L <= '1';
      PauseHits_L <= '1';

      -- Combined Actions
      CASE current_state IS
         WHEN Miss => 
            CacheWrite <= '1';
            PMREAD_L <= '0' after 6ns;
            PauseHits_L <= '0';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
